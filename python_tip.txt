
19/07/13 ---------------------------------------------------------------------------------------------------

데이터프레임에서 unnamed가 들어가있는 column을 제거하려는 작업
df.loc[:, ~df.columns.str.contains('^Unnamed')] # 문자열->contains


19/06/02 ---------------------------------------------------------------------------------------------------

<pd.read_csv 옵션>
dtype 사용방법 dtype= {'컬럼A'=np.int8,.....} # 불러오기할때 메모리 사용량을 줄일수있다.
header= None # 칼럼으로 사용할 로우의 번호 기본값은 0(첫 로우)이며 헤더가 없으면 None으로 지정할 수 있다.
usecols=['컬럼A'] # 선택된 컬럼만 불러온다.
index_col= 0 # 색인으로 사용할 칼럼번호나 이름, 계층적 색인을 지정할 경우 리스트를 넘길 수 있다.

* 파일을 여러 조각에 나누어서 읽고 싶다면 chunksize옵션으로 로우의 개수를 주면된다.
chunker=pd.read_csv('ch06/ex6.csv', chunksize=1000)
* read_csv 에서 반환된 TextParser 객체를 이용해서 chunksize에 따라 분리된 파일을 순회 할 수 있다. 
chunker=pd.read_csv('ch06/ex6.csv', chunksize=1000)
df= pd.DataFrame()
for piece in chunker:
   df= pd.concat(piece)

<df.to_csv 옵션>
index = False # 저장할때 index를 제외한다.
해당옵션을 지정하지 않으면 나중에 불러올때 index 컬럼이 따로 생긴다.

19/05/19 ---------------------------------------------------------------------------------------------------

s1= pd.Series({'a':1, 'b':2}) # a,b가 인덱스 1,2가 값
df= pd.DataFrame({'a':[1,2,1,4], 'b':[100,200,300,300]}) # a,b가 칼럼
pd.concat([s1,s2]) # 디폴트로 axis=0이며(시리즈를 로우방향)으로 합친다. 새로운 시리즈객체가 생성된다.
pd.concat([df, df1]) 로우방향으로 합치고 데이트프레임객체를 생성한다.
ex) XY= pd.concat(X)
Y= np.array([[[1],[2]],[[3],[4]]])
Y.shape는 (2, 2, 1)이다. Y.ndim은 3이다.
np.hstack(Y) 을 하면 ndim이 한차원씩줄어든다. [[1, 3],[2, 4]] -> [1,2,3,4]
df.as_matrix() -> df.values와 동일 # df를 인덱스와 컬럼을 제외한 값들을 메트릭스(array행렬)형태로 반환한다.

리스트를 합칠때
append는 하나의 값만 추가할수있다.
list_a += [1,2,3,4] 요렇게 하면된다.

19/05/18 ---------------------------------------------------------------------------------------------------

<df사용시 처리속도, 메모리를 효율적으로 사용하는 방법>
for문으로 직접 index하여 값넣지 말것.
isnull 사용하지 말것.
가능하면 replace, map 사용할것.
S1= S1.map(함수이름)
def 함수이름(v): #S1시리즈의 각각의 값을 처리한다.
    return v+1
np.NaN -> 결측값은 float형이다. int형으로 변환불가
때문에 결측값이 포함된 컬럼을 int형으로 형변환하기 위해서는 다음순으로
S1.replace('특수문자', -99, inplace= True)
S1.fillna(-99, inplace= True)
S1= S1.astype(np.int8) # 
S1= S1.astype(np.float).astype(np.int8) # '숫자' 문자열이 섞여있을경우

fillna 할때 결측값이 많으면 메모리 사용량 많아짐.

특정한 시간과 특정한 id가 혼재되어있을때
시간lag파생변수를 생성하는 방법 ->부동산예측에서도 사용할수있음
df.merge(df_lag, on=['ncodpers', 'int_date'], how='left')
